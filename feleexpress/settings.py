"""
Django settings for feleexpress project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import datetime
import os
from pathlib import Path
from typing import List

import dj_database_url
from decouple import config
from django.templatetags.static import static
from django.urls import reverse_lazy
from django.utils.translation import gettext_lazy as _

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG", default=False, cast=bool)

ALLOWED_HOSTS_STRING = config("ALLOWED_HOSTS_STRING", default="")
if not ALLOWED_HOSTS_STRING:
    ALLOWED_HOSTS = []
else:
    ALLOWED_HOSTS = ALLOWED_HOSTS_STRING.split(",")
# ALLOWED_HOSTS = ["*"]

CSRF_TRUSTED_ORIGINS_STRING = config("CSRF_TRUSTED_ORIGINS_STRING", default="")
if not CSRF_TRUSTED_ORIGINS_STRING:
    CSRF_TRUSTED_ORIGINS = []
else:
    CSRF_TRUSTED_ORIGINS = CSRF_TRUSTED_ORIGINS_STRING.split(",")

# Base User
AUTH_USER_MODEL = "authentication.User"

# Application definition

INSTALLED_APPS = [
    "unfold",  # before django.contrib.admin
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework_simplejwt.token_blacklist",
    "django_celery_beat",
    "drf_yasg",
    "storages",
    "unfold.contrib.filters",  # optional, if special filters are needed
    "unfold.contrib.forms",  # optional, if special form elements are needed
    "unfold.contrib.inlines",  # optional, if special inlines are needed
    "unfold.contrib.import_export",  # optional, if django-import-export package is used
    "unfold.contrib.guardian",  # optional, if django-guardian package is used
    "unfold.contrib.simple_history",  # optional, if django-simple-history package is used
    "authentication.apps.AuthenticationConfig",
    "business.apps.BusinessConfig",
    "customer.apps.CustomerConfig",
    "notification.apps.NotificationConfig",
    "order.apps.OrderConfig",
    "rider.apps.RiderConfig",
    "wallet.apps.WalletConfig",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "feleexpress.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "feleexpress.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASE_URL = config("DATABASE_URL", default="")

# set db connection requests to 600 seconds to enable persistent connections
DATABASES = {"default": dj_database_url.parse(DATABASE_URL, conn_max_age=0)}

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Africa/Lagos"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

AWS_DEFAULT_REGION = config("AWS_DEFAULT_REGION", "")
AWS_S3_BUCKET = config("AWS_S3_BUCKET", "")
AWS_ACCESS_KEY = config("AWS_ACCESS_KEY", "")
AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY", "")

USE_S3 = config("USE_S3", cast=bool, default=True)
if USE_S3:
    # aws settings
    AWS_ACCESS_KEY_ID = config("AWS_ACCESS_KEY")
    AWS_SECRET_ACCESS_KEY = config("AWS_SECRET_ACCESS_KEY")
    AWS_STORAGE_BUCKET_NAME = config("AWS_S3_BUCKET")
    AWS_DEFAULT_ACL = "public-read"
    AWS_S3_CUSTOM_DOMAIN = f"{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com"
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    # s3 static settings
    AWS_LOCATION = "static"
    STATIC_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{AWS_LOCATION}/"
    STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
else:
    STATIC_URL = "/static/"
    STATIC_ROOT = os.path.join(BASE_DIR, "static")
    STATICFILES_DIRS = [os.path.join(BASE_DIR, "business", "static", "assets")]

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

ENVIRONMENT = config("ENVIRONMENT", default="dev")  # dev or production or staging

REDIS_CONNECTION_URL = config("REDIS_URL", default="redis://redis:6379")
REDIS_INSTANCE_ONE = f"{REDIS_CONNECTION_URL}/0"
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_INSTANCE_ONE,
        "OPTIONS": {"CLIENT_CLASS": "django_redis.client.DefaultClient"},
    }
}

CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_BROKER_URL = (
    CELERY_RESULT_BACKEND
) = CELERY_REDIS_SCHEDULER_URL = REDIS_INSTANCE_ONE
CELERY_REDIS_SCHEDULER_KEY_PREFIX = "tasks:meta:"
CELERY_BEAT_MAX_LOOP_INTERVAL = 2
CELERY_MAX_RETRY = config("CELERY_MAX_RETRY", default=3, cast=int)
CELERY_RETRY_DELAY = config("CELERY_RETRY_DELAY", default=5, cast=int)

REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": ["rest_framework.permissions.IsAuthenticated"],
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    "DEFAULT_PAGINATION_CLASS": "helpers.utils.CustomPagination",
    "PAGE_SIZE": 8,
    "EXCEPTION_HANDLER": "helpers.exceptions.custom_exception_handler",
    "DEFAULT_THROTTLE_CLASSES": [
        "rest_framework.throttling.AnonRateThrottle",
        "rest_framework.throttling.UserRateThrottle",
    ],
    "DEFAULT_THROTTLE_RATES": {
        "anon": f"{config('THROTTLE_RATE', default='1000')}/{config('THROTTLE_PERIOD', default='day')}",
        "user": f"{config('THROTTLE_RATE', default='1000')}/{config('THROTTLE_PERIOD', default='day')}",
    },
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": datetime.timedelta(
        minutes=config("ACCESS_TOKEN_LIFETIME", default=60, cast=int)
    ),
    "REFRESH_TOKEN_LIFETIME": datetime.timedelta(
        minutes=config("REFRESH_TOKEN_LIFETIME", default=360, cast=int)
    ),
    "BLACKLIST_AFTER_ROTATION": True,
    "AUTH_TOKEN_CLASSES": ("helpers.token_manager.CustomAccessToken",),
}
API_LOGGING_ENABLED = config("API_LOGGING_ENABLED", cast=bool, default=False)

if API_LOGGING_ENABLED:
    INSTALLED_APPS.append("drf_api_logger")
    MIDDLEWARE.append(
        "drf_api_logger.middleware.api_logger_middleware.APILoggerMiddleware"
    )
    DRF_API_LOGGER_DATABASE = True
    DRF_API_LOGGER_EXCLUDE_KEYS = [
        "password",
        "token",
        "access",
        "access_key",
        "secret_key",
        "refresh",
        "pin",
        "otp",
        "AUTHORIZATION",
    ]
    DRF_API_LOGGER_SLOW_API_ABOVE = (
        200
    )  # in milliseconds, this will add a filter to display apis with response time above 200ms
    DRF_API_LOGGER_METHOD: List[str] = []  # empyty list means log all http methods
    DRF_API_LOGGER_SKIP_URL_NAME: List[str] = []  # skip any url we don't want to log
    DRF_API_LOGGER_SKIP_NAMESPACE: List[str] = []  # skip any app we don't want to log
    DRF_API_LOG_SERVER_ERROR = config(
        "DRF_API_LOG_SERVER_ERROR", cast=bool, default=False
    )

UNFOLD = {
    "SITE_TITLE": "Fele express admin",
    "SITE_HEADER": None,
    # "SITE_URL": "/",
    "SITE_ICON": lambda request: static(
        "assets/img/favicon.png"
    ),  # both modes, optimise for 32px height
    # "SITE_ICON": {
    #     "light": lambda request: static("icon-light.svg"),  # light mode
    #     "dark": lambda request: static("icon-dark.svg"),  # dark mode
    # },
    "SITE_LOGO": lambda request: static(
        "assets/img/favicon.png"
    ),  # both modes, optimise for 32px height
    "SITE_SYMBOL": "speed",  # symbol from icon set
    "SITE_FAVICONS": [
        {
            "rel": "icon",
            "sizes": "32x32",
            "type": "image/svg+xml",
            "href": lambda request: static("assets/img/favicon.png"),
        }
    ],
    "SHOW_HISTORY": True,  # show/hide "History" button, default: True
    "SHOW_VIEW_ON_SITE": True,  # show/hide "View on site" button, default: True
    # "ENVIRONMENT": "sample_app.environment_callback",
    # "DASHBOARD_CALLBACK": "sample_app.dashboard_callback",
    "THEME": "dark",  # Force theme: "dark" or "light". Will disable theme switcher
    "COLORS": {
        "primary": {
            "50": "250 245 255",
            "100": "243 232 255",
            "200": "233 213 255",
            "300": "216 180 254",
            "400": "192 132 252",
            "500": "168 85 247",
            "600": "147 51 234",
            "700": "126 34 206",
            "800": "107 33 168",
            "900": "88 28 135",
            "950": "59 7 100",
        }
    },
    "EXTENSIONS": {"modeltranslation": {"flags": {"en": "🇬🇧", "fr": "🇫🇷", "nl": "🇧🇪"}}},
    "SIDEBAR": {
        "show_search": True,  # Search in applications and models names
        "show_all_applications": True,  # Dropdown with all applications and models
        "navigation": [
            {
                "title": _("Navigation"),
                # "separator": True,  # Top border
                # "collapsible": True,  # Collapsible group of links
                "items": [
                    {
                        "title": _("Dashboard"),
                        "link": reverse_lazy("admin:index"),
                        "permission": lambda request: request.user.is_superuser,
                    },
                    {
                        "title": _("Customer"),
                        "link": reverse_lazy("admin:customer_customer_changelist"),
                    },
                ],
            }
        ],
    },
}


def dashboard_callback(request, context):
    """
    Callback to prepare custom variables for index template which is used as dashboard
    template. It can be overridden in application by creating custom admin/index.html.
    """
    context.update(
        {"sample": "example"}  # this will be injected into templates/admin/index.html
    )
    return context


def environment_callback(request):
    """
    Callback has to return a list of two values represeting text value and the color
    type of the label displayed in top right corner.
    """
    return ["Production", "danger"]  # info, danger, warning, success


def badge_callback(request):
    return 3


def permission_callback(request):
    return request.user.has_perm("feleexpress.change_model")


LOGIN_URL = "/admin/login"

FELE_CHARGE = config("FELE_CHARGE", 16, cast=int)

SENDGRID_API_KEY = config("SENDGRID_API_KEY", "")
SENDER_EMAIL = config("SENDER_EMAIL", "")
SENDER_NAME = config("SENDER_NAME", "")

EMAIL_VERIFICATION_TTL = config("EMAIL_VERIFICATION_TTL", 21600, cast=int)
EMAIL_VERIFICATION_MAX_TRIALS = config("EMAIL_VERIFICATION_MAX_TRIALS", 5, cast=int)

PHONE_VERIFICATION_TTL = config("PHONE_VERIFICATION_TTL", 21600, cast=int)
PHONE_VERIFICATION_MAX_TRIALS = config("PHONE_VERIFICATION_MAX_TRIALS", 3, cast=int)

TEST_OTP_STRING = config("TEST_OTP_STRING", default="")
if not TEST_OTP_STRING:
    TEST_OTP = []
else:
    TEST_OTP = TEST_OTP_STRING.split(",")

BASE_URL = config("BASE_URL", cast=str)
ADMIN_EMAILS = config("ADMIN_EMAILS", default="").split(",")

PAYSTACK_SECRET_KEY = config("PAYSTACK_SECRET_KEY", "")
PAYSTACK_WHITELISTED_IP = config("PAYSTACK_WHITELISTED_IP", default="").split(",")

ENABLED_IP_LOOKUP = config("ENABLED_IP_LOOKUP", cast=bool, default=False)
ONE_SIGNAL_KEY = config("ONE_SIGNAL_KEY", "")
ONE_SIGNAL_APP_ID = config("ONE_SIGNAL_APP_ID", "")
ONE_SIGNAL_SMS_FROM = config("ONE_SIGNAL_SMS_FROM", "")

TERMII_API_KEY = config("TERMII_API_KEY", "")
TERMII_SECRET_KEY = config("TERMII_SECRET_KEY", "")
TERMII_SMS_FROM = config("TERMII_SMS_FROM", "")

GOOGLE_API_KEY = config("GOOGLE_API_KEY", "")
GOOGLE_SEARCH_LOCATION = config("GOOGLE_SEARCH_LOCATION", cast=str)
GOOGLE_SEARCH_RADIUS = config("GOOGLE_SEARCH_RADIUS", cast=int)

DEACTIVATION_PREPEND_VALUE = config(
    "DEACTIVATION_PREPEND_VALUE", default="fele_deactivated_user"
)
ENCRYPTION_KEY = bytes(
    config("ENCRYPTION_KEY", default="A80ViqPXCsDl_koGp6JSEeYSeGD5wt9iObp0mJigh90="),
    "utf-8",
)
